import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(layout="wide")
st.title("♻️ Smart Waste Management Dashboard - India")

# Load data
df = pd.read_csv("Waste_Management_and_Recycling_India.csv")  # Adjust path if needed
# Sidebar filter - Waste Type
st.sidebar.markdown("## ♻️ Filter by Waste Type")
waste_types = df['Waste Type'].dropna().unique()
selected_types = st.sidebar.multiselect("Select Waste Types", waste_types, default=waste_types)

# Fallback to all waste types if user unselects everything
if selected_types:
    df = df[df['Waste Type'].isin(selected_types)]
else:
    st.warning("⚠️ Please select at least one Waste Type to see the analysis.")
    st.stop()  # This halts the app to prevent errors or blank graphs

#  Overview Section
st.markdown("### 📄 Dataset Preview")
st.dataframe(df.head())
st.markdown("### 📈 National Waste Management KPIs")
col1, col2, col3 = st.columns(3)

col1.metric("Avg Waste Generated", f"{df['Waste Generated (Tons/Day)'].mean():.1f} Tons/Day")
col2.metric("Avg Recycling Rate", f"{df['Recycling Rate (%)'].mean():.1f}%")
col3.metric("Avg Efficiency Score", f"{df['Municipal Efficiency Score (1-10)'].mean():.1f}")

# Total Waste Generated by City
st.markdown("### 🏙️ Total Waste Generated by City")
fig1, ax1 = plt.subplots(figsize=(12, 6))
city_waste = df.groupby('City/District')['Waste Generated (Tons/Day)'].sum().sort_values(ascending=False)
sns.barplot(x=city_waste.values, y=city_waste.index, palette="viridis", ax=ax1)
ax1.set_title("Total Waste Generated by City")
ax1.set_xlabel("Tons/Day")
ax1.set_ylabel("City")
st.pyplot(fig1)


st.markdown("""
**🔍 Insight:**  
Cities like Mumbai, Delhi, and Bengaluru generate the highest waste per day. This reflects the direct impact of population density and urbanization on waste volume.
""")

#  Average Recycling Rate by Waste Type
st.markdown("### ♻️ Average Recycling Rate by Waste Type (Log Scale)")
fig2, ax2 = plt.subplots(figsize=(10, 6))
type_recycling = df.groupby('Waste Type')['Recycling Rate (%)'].mean().sort_values()
sns.barplot(x=type_recycling.values, y=type_recycling.index, palette="magma", ax=ax2)
ax2.set_title("Avg Recycling Rate by Waste Type")
ax2.set_xlabel("Recycling Rate (%)")
ax2.set_ylabel("Waste Type")
ax2.set_xscale("log")  # log scale as you requested
st.pyplot(fig2)


st.markdown("""
**🔍 Insight:**  
Certain waste types like paper and plastic show relatively higher recycling rates, while hazardous or mixed waste types are poorly recycled, indicating challenges in segregation and processing.
""")

#  Sidebar - City Selection
st.sidebar.markdown("## 🏙️ City-Level View")
city_list = df['City/District'].dropna().unique()
selected_city = st.sidebar.selectbox("Select a City", sorted(city_list), key="city_selector")

# 🔍 City-Specific Analysis
city_data = df[df['City/District'] == selected_city]
st.markdown(f"### 🔍 Detailed View for: {selected_city}")
st.dataframe(city_data)

# Bar Plot for selected city
fig_city, ax = plt.subplots(figsize=(8, 5))
sns.barplot(data=city_data, x='Recycling Rate (%)', y='Waste Type', palette='coolwarm', ax=ax)
ax.set_title(f"Recycling Rate by Waste Type in {selected_city}")
ax.set_xscale("log")  # add log scale on x-axis for differentiation
st.pyplot(fig_city)


st.markdown(f"""
**🔍 Insight for {selected_city}:**  
The recycling performance varies significantly across waste types. Some cities may excel in plastic or organic recycling, while others lag behind — highlighting the need for targeted waste management strategies.
""")
# Add at the end of city-specific section
st.markdown("### 📥 Download City Data")
csv = city_data.to_csv(index=False).encode('utf-8')
st.download_button("Download CSV", data=csv, file_name=f"{selected_city}_waste_data.csv", mime='text/csv')

# Efficiency vs Recycling Rate

st.markdown("### 🏭 Efficiency vs Recycling Rate")
fig3, ax3 = plt.subplots(figsize=(8, 6))
sns.scatterplot(
    data=df,
    x='Municipal Efficiency Score (1-10)',
    y='Recycling Rate (%)',
    hue='Waste Type',
    ax=ax3
)
ax3.set_title("Efficiency vs Recycling Rate")
st.pyplot(fig3)


st.markdown("""
**🔍 Insight:**  
There is a visible positive trend: municipalities with higher efficiency scores tend to achieve better recycling rates. This emphasizes the importance of administrative effectiveness in waste management.
""")
#  Cost vs Awareness Campaigns

st.markdown("### 💰 Cost vs Awareness Campaigns")
fig4, ax4 = plt.subplots(figsize=(8, 6))
sns.scatterplot(
    data=df,
    x='Awareness Campaigns Count',
    y='Cost of Waste Management (₹/Ton)',
    hue='Waste Type',
    style='Waste Type',
    s=80,
    alpha=0.6,
    edgecolor='black',
    ax=ax4
)
ax4.set_yscale('log')  # log scale for Y axis
ax4.set_title("Cost vs Awareness Campaigns (Log Y-Axis)")
st.pyplot(fig4)

st.markdown("""
**🔍 Insight:**  
Cities investing in more awareness campaigns tend to manage waste more cost-effectively, though results vary by waste type. This suggests that public participation and education play a vital role in controlling costs.
""")
# --- ML: Predicting Recycling Rate ---
st.markdown("## 🔮 Machine Learning - Predicting Recycling Rate (%)")

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Select features and target
features = [
    'Municipal Efficiency Score (1-10)',
    'Waste Generated (Tons/Day)',
    'Cost of Waste Management (₹/Ton)',
    'Awareness Campaigns Count'
]
target = 'Recycling Rate (%)'

# Clean data
df_ml = df[features + [target]].dropna()

# Split
X = df_ml[features]
y = df_ml[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluate
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

st.markdown("### 📈 Model Performance")
st.write(f"📉 **Mean Absolute Error (MAE)**: `{mae:.2f}`")
st.write(f"🔢 **R² Score**: `{r2:.2f}`")

# Feature Importance
importances = model.feature_importances_
importance_df = pd.DataFrame({'Feature': features, 'Importance': importances})
importance_df = importance_df.sort_values(by='Importance', ascending=True)

fig_imp, ax_imp = plt.subplots(figsize=(8, 5))
sns.barplot(data=importance_df, x='Importance', y='Feature', palette='crest', ax=ax_imp)
ax_imp.set_title("📊 Feature Importance - Random Forest Model")
st.pyplot(fig_imp)

st.markdown("## 📌 Final Summary & Recommendations")

st.markdown("""
- 🔍 Cities with high waste generation need improved segregation and recycling infrastructure.
- 📉 Some waste types like plastic still have poor recycling rates despite awareness.
- 📈 Investing in awareness campaigns appears to reduce overall waste management costs.
- 🏛️ Municipal efficiency is a major factor influencing recycling performance — consider benchmarking top cities.
""")
